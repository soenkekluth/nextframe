{"version":3,"file":"nextframe.js","sources":["../src/nextframe.js"],"sourcesContent":["import raf from 'raf';\n\n/**\n * create a Promise that resolves in the next Animationframe\n * @param  {...} args - optional values that would be the params of the Promises resolve\n * @return {Promise} which will resolve in the next Animationframe\n */\nexport const nextFrame = (...args) => new Promise(resolve => raf(() => { resolve(...args); }));\n\n/**\n * waiting x frames before the Promise will resolve\n * @param  {Number}    frame - the number of frames the Promise waits before resolving\n * @param  {...} args \t- optional values that would be the params of the Promises resolve\n * @return {Promise} which will resolve after the waiting frames\n */\nexport const waitFrames = (frame = 1, ...args) => new Promise((resolve) => {\n  let i = 0;\n  const count = () => {\n    if (++i >= frame) {\n      return resolve(frame, ...args);\n    }\n    raf(count);\n  }\n  raf(count);\n});\n\n\n/**\n * resolve when fn returns a truthy value.\n * @param  {Function}  fn   a function that will be called every frame to check for changes\n * @param  {...[type]} args  \t- optional values that would be the params of the Promises resolve\n * @return {Promise} which will resolve after the waiting frames\n */\nexport const when = (fn, ...args) => {\n  return nextFrame()\n    .then(() => {\n      const result = fn(...args);\n      if (result) {\n        return (args && (args.length > 1)) ? args : result;\n      }\n      return when(fn, ...args);\n    });\n};\n\n\n/**\n * until fn returns a truthy value do not resolve.\n * @param  {Function}  fn   a function that will be called every frame to check for changes\n * @param  {...[type]} args  \t- optional values that would be the params of the Promises resolve\n * @return {Promise} which will resolve after the waiting frames\n */\nexport const until = (fn, ...args) => {\n  return nextFrame()\n    .then(() => {\n      const result = fn(...args);\n      if (result) {\n      \treturn until(fn, ...args);\n      }\n       return (args && (args.length > 1)) ? args : result;\n    });\n};\n\n\n/**\n * create an animationframe loop that calls a function (callback) in every frame\n * @param  {Function} cb - gets called in every frame - for rendering mostly\n * @return {Function}  a function which cancels the initialed loop by calling it\n */\nexport const loop = (cb) => {\n  if (typeof cb !== 'function') {\n    throw 'callback needs to be a function';\n  }\n  let f = true;\n  const frame = () => {\n    if (f) {\n      cb();\n      raf(frame);\n    }\n  }\n  raf(frame);\n  return () => {\n    f = false;\n  };\n};\n\n\n/**\n * create a throttled animationframe loop that calls a function (callback) in every specified\n * @param  {Function} cb        gets called in every specified frame\n * @param  {Number}   throttle in wich interval cb is called\n * @return {Function}  a function which cancels the initialed loop by calling it\n */\nexport const throttleFrames = (cb, throttle = 0) => {\n  if (typeof cb !== 'function') {\n    throw 'callback needs to be a function';\n  }\n  let f = true;\n  let i = 0;\n  const frame = () => {\n    ++i;\n    if (f) {\n      if (throttle && (i % throttle === 0)) {\n        cb();\n      }\n      raf(frame);\n    }\n  }\n  raf(frame);\n  return () => {\n    f = false;\n  };\n};\n\n/**\n * delays the call to nextFrame with setTimeout\n * @param  {Number}    ms    delay in ms\n * @param  {...} args \t- optional values that would be the params of the Promises resolve\n * @return {Promise} which will resolve after the delayed animationframe\n */\nexport const delay = (ms = 0, ...args) => new Promise((resolve, reject) => setTimeout(() => {\n  nextFrame()\n    .then(() => resolve(...args));\n}, ms));\n\n\n/**\n * call a function sequencely every next frame on every iterating position of an array\n * @param  {Array}   collection keeps all values that will be used as the argument for the function\n * @param  {Function} fn         will be called with array values as aruments\n * @return {Promise} which will resolve after the sequence\n */\nexport const sequence = (collection, fn) => {\n  let chain = Promise.resolve();\n  const values = [];\n  collection.forEach(item => {\n    chain = chain\n      .then(() => nextFrame().then(() => values.push(fn(item))));\n  });\n  return chain.then(() => values);\n}\n\n\nexport { sequence as frameSequence }\nexport { waitFrames as wait }\nexport { loop as nextFrames }\nexport { loop as onEnterFrame }\nexport { throttleFrames as throttle }\nexport { nextFrame as frame }\nexport default nextFrame;\n"],"names":["nextFrame","args","Promise","raf","waitFrames","frame","resolve","i","count","when","fn","then","result","length","until","loop","cb","f","throttleFrames","throttle","delay","ms","reject","setTimeout","sequence","collection","chain","values","forEach","push","item"],"mappings":"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"}